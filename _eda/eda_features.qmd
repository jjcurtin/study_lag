---
title: "Check features for `r params$lag` lag `r params$version` "
author: "Kendra Wyant"
date: "`r lubridate::today()`"
format:
  html:
    embed-resources: true
output: 
  html_document:
    toc: true 
    toc_depth: 4
editor_options: 
  chunk_output_type: console
params:
  lag: 0
  version: "v1"
---

### Notes
This script reads in the lagged features for one week prediction windows and performs checks. To use change parameters in Yaml header and render.    
 
 
### Set Up Environment

set parameters
```{r set_params}
lag <- params$lag 
version <- params$version 
```

Packages for script
```{r packages_script, message=FALSE, warning=FALSE}
library(tidyverse)
```

Chunk options
```{r}
knitr::opts_chunk$set(attr.output='style="max-height: 500px;"')
```

Absolute paths
```{r absolute_paths}
switch (Sys.info()[['sysname']],
        # PC paths
        Windows = {
          path_chtc <- str_c("P:/studydata/risk/chtc/lag")
          path_lag <- str_c("P:/studydata/risk/data_processed/lag")},

        # IOS paths
        Darwin = {
          path_chtc <- str_c("/Volumes/private/studydata/risk/chtc/lag")
          path_lag <- str_c("P:/studydata/risk/data_processed/lag")},
        
        # Linux paths
        Linux = {
          path_chtc <- str_c("~/mnt/private/studydata/risk/chtc/lag")
          path_lag <- str_c("P:/studydata/risk/data_processed/lag")}
        )
```



### Read in features

```{r}
features <- read_csv(file.path(str_c(path_chtc,"/features_", lag, "_", version,
                               "/output/batch_features.csv")),
                       show_col_types = FALSE)
```



### EDA

```{r}
# check if 0 lag matches EMA week features V5
if (lag == 0) {
  feat_ema <- read_csv(file.path("P:/studydata/risk/chtc/ema/features_1week_0_v5/output/batch_features.csv"), show_col_types = FALSE)
    
  print(waldo::compare(features, feat_ema))
  print("between 0 lag and EMA V5 week features")
}

print(str_c(c(nrow(features), " features detected"), collapse = ""))
  
duplicates <- features |> 
  count(subid, dttm_label) |> 
  filter(n > 1)
  
if (nrow(duplicates) == 0) {
  print("No duplicate labels detected")
  rm(duplicates)
} else {
  warning("Duplicate labels detected!")
}
  
  
print(str_c("Features created for ", length(unique(features$subid)), " subids"), 
      collapse = "")
  
  
features |> 
  janitor::tabyl(lapse) |> 
  print()

  
features |>  
  skimr::skim_without_charts() |> 
  summary() |> 
  print()
  
features |>  
  skimr::skim_without_charts() |> 
  select(skim_variable, n_missing, complete_rate) |> 
  arrange(desc(n_missing), skim_variable) |> 
  print(n = Inf)
  
  
features|>  
  skimr::skim_without_charts() |> 
  skimr::yank("numeric") |> 
  select(skim_variable, mean, p50, p0, p100) |> 
  filter(!skim_variable == "subid" & !skim_variable == "label_num") |> 
  arrange(desc(mean), skim_variable) |> 
  print(n = Inf)
```


### Save out features to processed data
```{r}
features |> 
  write_csv(file = str_c(path_lag, "/features_", lag, "lag_", version, ".csv"))
```

