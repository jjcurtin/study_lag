---
title: "demo lag functions"
author: "Kendra Wyant"
format: 
  html: 
    embed-resources: true
editor: source
---

## Notes



### Set up environment

packages and sources
```{r message = FALSE}
library(dplyr)
library(readr)
library(lubridate)
library(foreach)
library(tidyr)

source(here::here("shared/fun_features.R"))
```


set feature durations and lag/lead
```{r}
period_duration_test <- 24
lead_hours <- 24
```

Absolute paths
```{r absolute_paths}
switch (Sys.info()[['sysname']],
        # PC paths
        Windows = {
          path_lag <- str_c("P:/studydata/risk/data_processed/lag")},

        # IOS paths
        Darwin = {
          path_lag <- str_c("P:/studydata/risk/data_processed/lag")},
        
        # Linux paths
        Linux = {
          path_lag <- str_c("~/mnt/private/studydata/risk/data_processed/lag")}
        )
```


### Read in and prepare data for feature functions

EMA
```{r}
ema <- read_csv(file.path(path_lag, "ema.csv"), show_col_types = FALSE) |> 
  mutate(dttm_obs = with_tz(dttm_obs, tz = "America/Chicago")) |>   
  select(-c(contains("ema_1_"), ema_1, ema_type)) 

# pivot longer to allow feature function to loop over EMA items across rows
ema_long <- ema |> 
  pivot_longer(
    cols = starts_with("ema_"),
    names_to = "ema_num",
    values_to = "response")
```

Lapses, labels, and dates
```{r}
labels <- read_csv(file.path(path_lag, "labels_1week_0lag.csv"), show_col_types = FALSE) |> 
  mutate(dttm_label = with_tz(dttm_label, tz = "America/Chicago")) 

dates <- read_csv(file.path(path_lag, "study_dates.csv"), show_col_types = FALSE) |> 
  select(subid, data_start = study_start) |> 
  mutate(data_start = with_tz(data_start, tz = "America/Chicago"))
```


### Slice labels for demo
```{r}
set.seed(102030)
labels <- labels |> 
  slice_sample(n = 10)
```




### Make features

**Demo using EMA item 2 with a lag/lead time of 24 hours**
```{r}
for (i_label in 1:nrow(labels)) {
  label <- labels |> slice(i_label)
  subid <- label$subid 
  dttm_label <-  label$dttm_label
  
  print(str_c("subid: ", subid))
  print(str_c("label: ", dttm_label))
  print(str_c("period_duration: ", period_duration_test))
  print(str_c("lag time: ", lead_hours))
  print("ema used: ")
  
  
  get_x_period(the_subid = subid, 
             the_dttm_label = dttm_label, 
             x_all = ema_long, 
             lead = lead_hours, 
             period_duration = period_duration_test) |> 
  filter(ema_num == "ema_2") |> 
    print()
  
  print("most recent responses using score_most_recent(): ")
  score_most_recent(the_subid = subid,
                    the_dttm_label = dttm_label,
                    x_all  = ema_long,
                    lead = lead_hours,
                    data_start = dates,
                    col_name = "response",
                    data_type_col_name = "ema_num",
                    data_type_values = str_c("ema_2")) |> 
    print()
  
  print("max response using score_max(): ")
  score_max(the_subid = subid,
          the_dttm_label = dttm_label,
          x_all  = ema_long,
          period_durations = period_duration_test,
          lead = lead_hours,
          data_start = dates,
          col_name = "response",
          data_type_col_name = "ema_num",
          data_type_values = str_c("ema_2")) |> 
    print()
  
  print("min response using score_min(): ")
  score_min(the_subid = subid,
          the_dttm_label = dttm_label,
          x_all  = ema_long,
          period_durations = period_duration_test,
          lead = lead_hours,
          data_start = dates,
          col_name = "response",
          data_type_col_name = "ema_num",
          data_type_values = str_c("ema_2")) |> 
    print()
}
```

**Demo using EMA item 4 with a lag/lead time of 48 hours**
```{r}
lead_hours <- 48
```

```{r}
for (i_label in 1:nrow(labels)) {
  label <- labels |> slice(i_label)
  subid <- label$subid 
  dttm_label <-  label$dttm_label
  
  print(str_c("subid: ", subid))
  print(str_c("label: ", dttm_label))
  print(str_c("period_duration: ", period_duration_test))
  print(str_c("lag time: ", lead_hours))
  print("ema used: ")
  
  
  get_x_period(the_subid = subid, 
             the_dttm_label = dttm_label, 
             x_all = ema_long, 
             lead = lead_hours, 
             period_duration = period_duration_test) |> 
  filter(ema_num == "ema_4") |> 
    print()
  
  print("most recent responses using score_most_recent(): ")
  score_most_recent(the_subid = subid,
                    the_dttm_label = dttm_label,
                    x_all  = ema_long,
                    lead = lead_hours,
                    data_start = dates,
                    col_name = "response",
                    data_type_col_name = "ema_num",
                    data_type_values = str_c("ema_4")) |> 
    print()
  
  print("max response using score_max(): ")
  score_max(the_subid = subid,
          the_dttm_label = dttm_label,
          x_all  = ema_long,
          period_durations = period_duration_test,
          lead = lead_hours,
          data_start = dates,
          col_name = "response",
          data_type_col_name = "ema_num",
          data_type_values = str_c("ema_4")) |> 
    print()
  
  print("min response using score_min(): ")
  score_min(the_subid = subid,
          the_dttm_label = dttm_label,
          x_all  = ema_long,
          period_durations = period_duration_test,
          lead = lead_hours,
          data_start = dates,
          col_name = "response",
          data_type_col_name = "ema_num",
          data_type_values = str_c("ema_4")) |> 
    print()
}
```



